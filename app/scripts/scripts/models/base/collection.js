// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model', 'backbone-pageable'], function(Chaplin, Model, PageableCollection) {
  'use strict';
  var Collection, _ref;

  return Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      _ref = Collection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Collection.prototype.url = function() {
      return API_URL + this.urlPath();
    };

    Collection.prototype.model = Model;

    Collection.prototype.parse = function(data) {
      this.state.pageSize = data.perpage;
      this.state.totalRecords = data.total;
      this.state.totalPages = Math.ceil(this.state.totalRecords / this.state.pageSize);
      this.state.lastPage = this.state.totalPages - 1;
      return data.data;
    };

    Collection.prototype.state = {
      firstPage: 0,
      currentPage: 0,
      pageSize: 15
    };

    Collection.prototype.queryParams = {
      pageSize: 'perpage',
      currentPage: 'page'
    };

    return Collection;

  })(Chaplin.Collection);
});
