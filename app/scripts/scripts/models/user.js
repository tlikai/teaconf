// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var User, _ref;
  return User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    User.prototype.urlPath = function() {
      return '/user';
    };

    User.login = function(options) {
      _.extend(options, {
        url: API_URL + '/login',
        method: 'POST'
      });
      return $.ajax(options);
    };

    User.register = function(options) {
      _.extend(options, {
        url: API_URL + '/register',
        method: 'POST'
      });
      return $.ajax(options);
    };

    User.logout = function(options) {
      _.extend(options, {
        url: API_URL + '/logout',
        method: 'DELETE'
      });
      return $.ajax(options);
    };

    User.authenticate = function(options) {
      if (options == null) {
        options = {};
      }
      return $.ajax({
        url: API_URL + '/authenticate',
        method: 'GET',
        async: false,
        success: function(resp) {
          Chaplin.mediator.user = resp;
          if (options.success) {
            return options.success.apply(this, arguments);
          }
        },
        error: function(xhr) {
          Chaplin.mediator.user = null;
          if (options.error) {
            return options.error.apply(this, arguments);
          }
        },
        statusCode: {
          401: function(xhr) {
            if (options.unAuthenticate) {
              return options.error.apply(this, arguments);
            }
          }
        }
      });
    };

    User.prototype.changePassword = function(options) {
      _.extend(options, {
        url: API_URL + '/user/changePassword',
        method: 'PUT'
      });
      return $.ajax(options);
    };

    User.prototype.topics = function(options) {
      var user_id;
      user_id = this.get('id');
      _.extend(options, {
        url: "" + API_URL + "/user/" + user_id + "/topics",
        method: 'GET'
      });
      return $.ajax(options);
    };

    return User;

  })(Model);
});
